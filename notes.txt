-------------------------------------
VueProject: Portfolio
-------------------------------------

If you are encountering a CORS (Cross-Origin Resource Sharing) issue in a Vue 3 application while trying to fetch data from an external API, it means that the API server is not configured to allow cross-origin requests from your Vue application's domain. This is a security measure implemented by web browsers to prevent unauthorized access to resources on different domains.

To resolve the CORS issue, you have a few options:

1. **Proxy the Request**: Set up a proxy server on your backend that forwards the request to the external API. This way, the API request will be made from the same origin as your Vue application, and it won't be blocked by CORS policies. Your Vue app will make the API request to your backend, and the backend will, in turn, make the request to the external API.

2. **CORS Proxy Services**: Use a CORS proxy service like CORS Anywhere or crossorigin.me. These services act as intermediaries, allowing you to make requests through their server, which handles the CORS headers for you. However, be cautious when using third-party CORS proxy services, as they may introduce additional latency and may not be suitable for production environments.

3. **Server-Side Request**: If you have control over the server that serves your Vue app, you can make the API request from the server-side instead of directly from the client-side. This way, the request will be made from the same origin as your Vue app, and you won't encounter CORS issues.

4. **API Server Configuration**: If you have access to the API server, you can configure it to include the appropriate CORS headers in its responses to allow requests from your Vue app's domain. This typically involves setting the `Access-Control-Allow-Origin` header to the domain of your Vue app.

5. **JSONP**: If the API supports JSONP, you can use that as an alternative. JSONP is a technique to bypass CORS restrictions for GET requests, but it's not recommended for modern applications due to security concerns.

Remember that enabling CORS on the server should be done with caution to ensure that only trusted origins can access the API resources.

Choose the approach that best fits your application's requirements and security considerations. Using a proxy server or server-side request is often a preferred and more secure option for handling CORS issues in production applications.


# VUE DIRECTIVES: 

1. v-if: 
    Conditionally render an element based on the truthiness of an expression.
2. v-else: 
    Define the "else" condition for v-if.
3. v-else-if: 
    Define an "else if" condition for v-if.
4. v-show: 
    Conditionally show or hide an element based on the truthiness of an expression (uses CSS display property).
5. v-for: 
    Loop through an array or object and render elements based on each item's data.
6. v-bind (or simply ":"): 
    Bind data or expressions to element attributes, props, or component props.
7. v-on (or simply "@"): 
    Attach event listeners to trigger methods or expressions when events occur.
8. v-model: 
    reate two-way data binding between a form input element and Vue data.
9. v-pre: 
    Skip compilation for an element and its children, treating it as plain static content.
10. v-cloak: 
    Prevent displaying the Vue template while it's compiling (useful when using Vue with a custom build process).
11. v-once: 
    Render an element or component only once and never update it even if the data changes.
12.     
    v-html: Render HTML from a data property as innerHTML. Be cautious about using this due to possible XSS vulnerabilities.
13. 
v-text: 
    Update the text content of an element with the result of an expression (similar to interpolation {{ ... }})



Remember to use directives responsibly and securely, especially when dealing with user input or HTML rendering. Always sanitize user input and avoid using v-html unless you are confident that the data is safe to render as raw HTML. Additionally, keep in mind that v-html can increase the risk of Cross-Site Scripting (XSS) attacks, so use it only when necessary and with caution.


Already included file name '/Users/michaelrobins/Desktop/VSCode/New_Projects/portfolio_vue/src/components/Navbar.vue.js' differs from file name '/Users/michaelrobins/Desktop/VSCode/New_Projects/portfolio_vue/src/components/NavBar.vue.js' only in casing.

# Store:
    # state ( data ) 
    # getters ( computed )
    # actions ( methods )

# Does the same thing: 
    <div :class="[isActive ? activeClass : '', errorClass]"></div>
    <div :class="[{ active: isActive }, errorClass]"></div>

#  Built in APIs / Internal property access 
    # Best to AVOID.
    '$' prefix exposes the built-in APIs via the component instance
    '_'prefix exposes some internal properties 

# Reactive Proxy vs. Original:
    # Data is made reactive by leveraging JS Proxies

    # In Vue 3:
        # The original 'const newObject = {}' is left intact and will NOT be made reactive 
        # Not so with Vue 2
    #
    # CODE:
        export default {
            data() {
                return {
                    someObject: {} # When you access this (1)
                }
            },
            mounted() {
                const newObject = {} # After assigning it a value. (2)  
                this.someObject = newObject # 'this.someObject' becomes a reactive proxy of 'newObject' (3)

                # Falsey
                console.log(newObject === this.someObject)
            },
            methods: { # Vue automatically binds 'this' in 'methods:' option. (1.1) 
                increment: ()=>{
                    this.thing # NOT necessary
                }
            }

        }
    #
#

